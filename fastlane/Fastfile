default_platform(:ios)

platform :ios do

  desc "Create PR with release changes"
  lane :make_pull_request do |options|
    version = options[:version]
    dry_run = options[:dry_run] || false
    github_token = options[:github_token] || ENV["GITHUB_TOKEN"]
    skip_setup_git_user = options[:skip_setup_git_user] || false
    git_user_name = options[:git_user_name] || ENV["GIT_USER_NAME"]
    git_user_email = options[:git_user_email] || ENV["GIT_USER_EMAIL"]
    release_branch = options[:release_branch] || "main"
    

    if version.nil?
      version = get_next_release_version()
    end

    setup_git_user(
      git_user_name: git_user_name, 
      git_user_email: git_user_email,
      github_token: github_token,
      skip_setup_git_user: skip_setup_git_user
    )
    ensure_git_clean(release_branch: release_branch)
    update_changelog(version: version)
    update_version(version: version)

    create_github_pull_request(
      version: version,
      release_branch: release_branch,
      github_token: github_token
    )
  end

  desc "Create new release on github"
  lane :make_release do |options|
    dry_run = options[:dry_run] || false
    github_token = options[:github_token] || ENV["GITHUB_TOKEN"]
    skip_setup_git_user = options[:skip_setup_git_user] || false
    git_user_name = options[:git_user_name] || ENV["GIT_USER_NAME"]
    git_user_email = options[:git_user_email] || ENV["GIT_USER_EMAIL"]
    release_branch = options[:release_branch] || "main"

    version = get_next_release_version()
    release_notes = get_release_notes(version: version)

    setup_git_user(
      git_user_name: git_user_name,
      git_user_email: git_user_email,
      skip_setup_git_user: skip_setup_git_user
    )
    create_github_release(
      version: version,
      release_notes: release_notes,
      github_token: github_token,
      release_branch: release_branch,
      dry_run: dry_run
    )
  end

  desc "Publish to version of cocoapods"
  lane :make_publish_pod do |options|
    dry_run = options[:dry_run] || false
    trunk_token = ENV["COCOAPODS_TRUNK_TOKEN"]
    podpsec_name = ENV["PODSPEC_NAME"]

    if dry_run == true
      UI.important("Running in \"dry run\" mode. Publish to cocoapods won't happen.")
    else
      if trunk_token.nil?
        UI.user_error!("System environment \"COCOAPODS_TRUNK_TOKEN\" is required to publish a pod. Aborting script.")
      end
    
      Dir.chdir("..") do
        sh("pod lib lint --allow-warnings")
        sh("pod trunk push #{podpsec_name} --allow-warnings")
      end
    end
  end

##############################################################################
# RELEASE
##############################################################################

  desc "Create release on GitHub"
  private_lane :create_github_release do |options|
    version = options[:version]
    version_tag = "v#{version}"
    release_notes = options[:release_notes]
    github_token = options[:github_token]
    release_branch = options[:release_branch]
    dry_run = options[:dry_run] 

    if dry_run == true
      UI.important("Running in \"dry run\" mode. Release won't be published.")
    else
      if github_token.nil?
        UI.user_error!("GitHub Token is required to make release.")
      end

      set_github_release(
      repository_name: "arjankowski/github-actions-release-test",
      api_token: github_token,
      name: version_tag,
      tag_name: version_tag,
      description: release_notes,
      commitish: release_branch
    )
    end
  end

  desc "Commit version update"
  private_lane :create_github_pull_request do |options|
    version = options[:version]
    github_token = options[:github_token]
    release_branch = options[:release_branch]
    commit_version_tag = "v#{version}"
    commit_title = "chore: release #{commit_version_tag}"

    puts("*#{commit_version_tag}*")

    Dir.chdir("..") do
      sh("git checkout -b #{commit_version_tag}")
      sh("git add .")
      sh("git commit -am \"#{commit_title}\"")
      sh("git push origin -u #{commit_version_tag}")

    create_pull_request(
      api_token: github_token,
      repo: "arjankowski/github-actions-release-test",
      title: "#{commit_title}",
      head: "#{commit_version_tag}",
      base: "#{release_branch}",
    )
    end
  end


  ##############################################################################
  # VERSION UPDATE
  ##############################################################################

  desc "Get next release version based on conventional commits"
  private_lane :get_next_release_version do |options|
    release_version = ""
    Dir.chdir("..") do
      release_version = sh("standard-version --dry-run |  sed -En \"s/.*tagging release v(.*)/\\1/p\" | tr -d \"\n\"")
    end

    release_version
  end

  desc "Validate version"
  private_lane :is_version_valid do |options|
    version = options[:version]
    !!(version =~ /^\d+\.\d+\.\d+$/)
  end

  desc "Update SDK version"
  private_lane :update_version do |options|
    version = options[:version]


    # Update BoxSDK.podspec
    podspec_path = ENV["PODSPEC_PATH"]
    sh("sed -i.bak -E 's|(.*s.version.* = ).*|\\1\"#{version}\"|g' #{podspec_path}")
    sh("rm #{podspec_path}.bak")
  
  end

##############################################################################
# CHANGELOG UPDATE
##############################################################################

desc "Return release notes based on conventional commits"
private_lane :get_release_notes do |options|
  version = options[:version]
  escaped_version = sh("echo \"#{version}\" | sed -E 's/(\\.)/\\\\\\./g' | tr -d \"\n\"")
  release_notes = ""
  
  Dir.chdir("..") do
    release_notes = sh("sed -nE '/^#\{1,\} \\[#{escaped_version}\\]/,/^## \\[[0-9]+\.[0-9]+\.[0-9]+\\]/p' CHANGELOG.md | sed '1,2d' | sed '$d'")
  end
  
  release_notes
end

  desc "Update CHANGELOG.md file based on conventional commits"
  private_lane :update_changelog do |options|
    version = options[:version]
    update_changelog_script_path = ENV["UPDATE_CHANGELOG_SCRIPT_PATH"]

    Dir.chdir("..") do
      sh("standard-version --skip.tag --skip.commit --release-as #{version}")
      sh("#{update_changelog_script_path}")
    end
  end

##############################################################################
# GIT
##############################################################################

  desc "Setup git user"
  private_lane :setup_git_user do |options|
    git_user_name = options[:git_user_name]
    git_user_email = options[:git_user_email]
    github_token = options[:github_token]
    skip_setup_git_user = options[:skip_setup_git_user]

    if skip_setup_git_user == true
      UI.important("Skipping setup git user. Current git configuration will be used.")
    else
      repository_name = ENV["REPOSITORY_NAME"]
      repository_owner = ENV["REPOSITORY_OWNER"]

      if git_user_name.nil? || git_user_email.nil?
        UI.user_error!("Git user.name and user.email are requird. Aborting script.")
      end

      remote_url = "https://#{repository_owner}:#{github_token}@github.com/#{repository_owner}/#{repository_name}.git"
      sh("git config user.name #{git_user_name}")
      sh("git config user.email #{git_user_email}")
      sh("git remote set-url origin #{remote_url}")
    end
  end

  desc "Ensure git is clean"
  private_lane :ensure_git_clean do |options|
    release_branch = options[:release_branch]
    current_branch = sh("git rev-parse --abbrev-ref HEAD | tr -d \"\n\"")

    sh("git remote update")

    if current_branch != release_branch
      UI.user_error!("Local branch: \"#{current_branch}\" is different than release branch: \"#{release_branch}\". Abort script.")
    end

    different_commits_count = sh(" git rev-list HEAD...origin/#{release_branch} --count | tr -d \"\n\"")
    if different_commits_count != "0"
      UI.user_error!("Local branch HEAD is different than remote branch HEAD. Abort script.")
    end
 
    status_result = sh("git status --porcelain")
    if status_result != ""
      UI.user_error!("There are local changes that are not present on the remote. Aborting script.")
    end
  end

end
