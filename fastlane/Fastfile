default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"
  lane :release do |options|
    version = options[:version]
    is_draft = options[:is_draft] || false
    dry_run = options[:dry_run] || false
    github_token = options[:github_token] || ENV["GITHUB_TOKEN"]
    release_branch = options[:release_branch] || "main"

    if version.nil?
      version = get_next_release_version()
      puts("version is: #{version}!")
    end

    release_notes = get_release_notes()

    update_changelog(
      version: version
    )

    # update_version(version: version)

    commit_release_changes_with_tag(
      version: version,
      release_notes: release_notes,
      github_token: github_token
    )
    # create_release_on_github(
    #   version: version,
    #   release_notes: release_notes,
    #   github_token: github_token,
    #   release_branch: release_branch,
    #   dry_run: dry_run,
    #   is_draft: is_draft
    # )
  end

##############################################################################
# RELEASE
##############################################################################

  desc "Create release on GitHub"
  private_lane :create_release_on_github do |options|
    version = options[:version]
    version_tag = "v#{version}"
    release_notes = options[:release_notes]
    github_token = options[:github_token]
    release_branch = options[:release_branch]
    dry_run = options[:dry_run] 
    is_draft = options[:is_draft]
    release_notes_filename = ENV["RELEASE_NOTES_TMP_FILENAME"]
    release_notes_path = "../#{release_notes_filename}"

    if dry_run == true
      UI.important("Running in \"dry run\" mode. Release won't be published.")
    else
      if github_token.nil?
        UI.user_error!("GitHub Token is required to make release.")
      end

      File.write("#{release_notes_path}", release_notes)

      set_github_release(
      repository_name: "arjankowski/github-actions-release-test",
      api_token: github_token,
      name: "#{version_tag}",
      tag_name: "#{version_tag}",
      description: (File.read("#{release_notes_path}") rescue "No changelog provided"),
      commitish: "#{release_branch}",
      is_draft: is_draft
    )

    sh("rm #{release_notes_path}")
    end
  end

  desc "Commit version update"
  private_lane :commit_release_changes_with_tag do |options|
    version = options[:version]
    github_token = options[:github_token]
    version_tag = "v#{version}"
    release_notes = "#{version_tag}\n\n" + options[:release_notes]
    release_notes_filename = ENV["RELEASE_NOTES_TMP_FILENAME"]
    commit_title = "chore: release #{version_tag}"

    puts("*#{version_tag}*")

    
    Dir.chdir("..") do
      sh("git checkout -b #{version_tag}")
      sh("git add .")
      # File.write(release_notes_filename, release_notes)
      sh("git commit -am \"#{commit_title}\"")
      # sh("git tag -F#{release_notes_filename} #{version_tag}")
      # sh("git push --atomic origin HEAD #{version_tag}")
      # sh("rm #{release_notes_filename}")

    create_pull_request(
      api_token: github_token,      # optional, defaults to ENV["GITHUB_API_TOKEN"]
      repo: "arjankowski/github-actions-release-test",
      title: "#{commit_title}",
      head: "#{version_tag}",       # optional, defaults to current branch name
      base: "main", # optional, defaults to "master"
    )
    end
  end


  ##############################################################################
  # VERSION UPDATE
  ##############################################################################

  desc "Get next release version based on conventional commits"
  private_lane :get_next_release_version do |options|
    release_version = ""
    Dir.chdir("..") do
      release_version = sh("standard-version --dry-run |  sed -En \"s/.*tagging release v(.*)/\\1/p\" | tr -d \"\n\"")
    end

    release_version
  end

  desc "Validate version"
  private_lane :is_version_valid do |options|
    version = options[:version]
    !!(version =~ /^\d+\.\d+\.\d+$/)
  end

  desc "Update SDK version"
  private_lane :update_version do |options|
    version = options[:version]


    # Update BoxSDK.podspec
    podspec_path = ENV["PODSPEC_PATH"]
    sh("sed -i.bak -E 's|(.*s.version.* = ).*|\\1\"#{version}\"|g' #{podspec_path}")
    sh("rm #{podspec_path}.bak")
  
  end

##############################################################################
# CHANGELOG UPDATE
##############################################################################

desc "Return release notes based on conventional commits"
private_lane :get_release_notes do |options|
  release_notes = ""
  Dir.chdir("..") do
    release_notes = sh("standard-version --skip.commit --skip.push --skip.tag --dry-run | sed -ne \"/---/,/---/p\" | sed -e \"$ d\" | sed 1,4d ")
  end
  
  release_notes
end

  # desc "Return release notes based on actual CHANGELOG.md file"
  # private_lane :get_release_notes do |options|
  #   changelog_path = ENV["CHANGELOG_PATH"]
  #   release_notes_to_process = sh("sed -nE '/^## Next/,/^## v/p'  #{changelog_path} | sed -e '$ d' | sed 1,2d")

  #   processing_section = ""
  #   final_release_notes = ""
  #   release_notes_to_process.each_line do |line|
  #     if ["__Breaking Changes:__\n", "__New Features and Enhancements:__\n", "__Bug Fixes:__\n"].include? line
  #       if processing_section.lines.count > 2
  #         final_release_notes += processing_section 
  #       end

  #       processing_section = ""
  #     end
  #     processing_section += line
  #   end

  #   if processing_section.lines.count > 2
  #     final_release_notes += processing_section 
  #   end

  #   final_release_notes
  # end

  desc "Update CHANGELOG.md file based on conventional commits"
  private_lane :update_changelog do |options|
    version = options[:version]
    Dir.chdir("..") do
      sh("standard-version --skip.tag --skip.commit --release-as #{version}")
    end
  end

  # desc "Update changelog"
  # private_lane :update_changelog do |options|
  #   version = options[:version]
  #   release_notes = options[:release_notes]
  #   changelog_path = ENV["CHANGELOG_PATH"]
  #   date = sh("date '+%Y-%m-%d' | tr -d '\n'")

  #   # Remove empty sections from "Next Release"
  #   sh("sed -i '.bak' -E '/^## Next/,/^## v/{//!d;}' #{changelog_path}")
  #   File.open(changelog_path, "r+") do |file|
  #     content = ""``
  #     line_number = 1
  #     file.each_line do |file_line|
  #     if line_number == 5
  #       content += "\n"
  #       release_notes.lines.each { |notes_line|
  #         content += notes_line
  #       }
  #     end

  #     content += file_line
  #     line_number += 1
  #     end

  #     file.rewind
  #     file.write(content)
  #   end

  #   # Change Next Release to specific version
  #   sh("sed -i.bak -E 's/## Next Release.*/## v#{version} \[#{date}\]/g' #{changelog_path}")
  #   sh("rm #{changelog_path}.bak")

  #   # Add next release template
  #   header_template = ENV["CHANGELOG_HEADER_TEMPTLATE"].split("\n")
  #   header_template.reverse.each { |line| 
  #     sh("sed -i '.bak' '4s/^/#{line}\\n\\n/' #{changelog_path}")
  #   }
  #   sh("rm #{changelog_path}.bak")
  #   end
end
